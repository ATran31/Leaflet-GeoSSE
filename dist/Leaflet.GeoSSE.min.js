"use strict";const GeoSSE=L.GeoJSON.extend({connectToEventStream:function(){function addFeature(feature){if(!(self.options.featureIdField||feature.id)){return console.warn("`featureIdField` option or Feature `id` field are required to add "+"a feature, so it can be updated or removed.",feature)}self.addData(feature)}function updateOrAddFeature(feature){if(!(self.options.featureIdField||feature.id)){return console.warn("`featureIdField` option or Feature `id` field are required to add "+"a feature, so it can be updated or removed.",feature)}const layer=getLayer(feature);if(!layer)return self.addData(feature);const{geometry:geometry}=layer.feature;const{type:type}=feature.geometry;if(geometry.type!==type)return console.warn("Feature type mismatch. Existing feature type is ${geometry.type} "+`and new feature type is ${type}.`,feature);const{coordinates:[lng,lat]}=feature.geometry;layer.setLatLng({lat:lat,lng:lng});layer.feature=feature;self.resetStyle(layer);const{onEachFeature:onEachFeature}=self.options;if(onEachFeature)onEachFeature(feature,layer)}function finderId({feature:{id:id}}){return id===this.id}function finderIdField({feature:{properties:properties}}){const{featureIdField:featureIdField}=self.options;return properties[featureIdField]===this.properties[featureIdField]}function getLayer(feature){const finder=self.options.featureIdField?finderIdField:finderId;return self.getLayers().find(finder,feature)}function removeFeature(feature){if(!(self.options.featureIdField||feature.id)){return console.warn("`featureIdField` option or Feature `id` field are required to "+"delete a feature.",feature)}const layer=getLayer(feature);if(layer){self.removeLayer(layer)}}function add(event){const geojson=JSON.parse(event.data);if(geojson.type==="Feature"){return updateOrAddFeature(geojson)}geojson.features.forEach(updateOrAddFeature)}function create(event){const geojson=JSON.parse(event.data);if(geojson.type==="Feature"){return addFeature(geojson)}geojson.features.forEach(addFeature)}function update(event){const{options:{featureIdField:featureIdField}}=self;const geojson=JSON.parse(event.data);const{properties:{[featureIdField]:id}}=geojson;for(let layer of self.getLayers())if(layer.feature.properties[featureIdField]===id){self.removeLayer(layer);self.addData(geojson)}}function remove(event){const geojson=JSON.parse(event.data);if(geojson.type==="Feature"){return removeFeature(geojson)}geojson.features.forEach(removeFeature)}const self=this;if(typeof this.options.streamUrl==="undefined"){throw Error("Undefined event streamUrl.")}const source=new EventSource(this.options.streamUrl);source.addEventListener("add",add,false);source.addEventListener("remove",remove,false);source.addEventListener("create",create,false);source.addEventListener("update",update,false);source.addEventListener("delete",remove,false);source.onopen=function(event){};source.onmessage=function(event){};source.onerror=function(event){if(source.readyState===2){self.connectToEventStream()}};this.eventSource=source},disconnect:function(){this.eventSource.close()},setStreamUrl:function(newStreamUrl){this.options.streamUrl=newStreamUrl},setFeatureIdField:function(fieldName){this.options.featureIdField=fieldName},switchStream:function(newStream,featureIdField,emptyLayer=false){if(emptyLayer){this.clearLayers()}this.setStreamUrl(newStream);if(featureIdField!==undefined){this.setFeatureIdField(featureIdField)}this.disconnect();this.connectToEventStream()}});L.geoSSE=function(data,options){return new GeoSSE(data,options)};