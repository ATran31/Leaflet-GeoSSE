"use strict";const GeoSSE=L.GeoJSON.extend({connectToEventStream:function(){function addFeature(feature){self.addData(feature)}function createEvent(event){const geojson=JSON.parse(event.data);if(geojson.type==="Feature"){return addFeature(geojson)}geojson.features.forEach(addFeature)}function deleteEvent(event){const geojson=JSON.parse(event.data);if(geojson.type==="Feature"){return removeFeature(geojson)}geojson.features.forEach(removeFeature)}function finder({feature:{properties:properties}}){return properties[featureIdField]===this[featureIdField]}function removeFeature(feature){const layer=self.getLayers().find(finder,feature.properties);if(layer){self.removeLayer(layer)}}function updateEvent(event){deleteEvent(event);createEvent(event)}const self=this;const{featureIdField:featureIdField}=this.options;if(typeof this.options.streamUrl==="undefined"){throw Error("Undefined event streamUrl.")}if(typeof featureIdField==="undefined"){throw Error("Undefined featureIdField option.")}const source=new EventSource(this.options.streamUrl);source.addEventListener("create",createEvent,false);source.addEventListener("delete",deleteEvent,false);source.addEventListener("update",updateEvent,false);source.onopen=function(event){};source.onmessage=function(event){};source.onerror=function(event){if(source.readyState===2){self.connectToEventStream()}};this.eventSource=source},disconnect:function(){this.eventSource.close()},setStreamUrl:function(newStreamUrl){this.options.streamUrl=newStreamUrl},setFeatureIdField:function(fieldName){this.options.featureIdField=fieldName},switchStream:function(newStream,featureIdField,emptyLayer=false){if(emptyLayer){this.clearLayers()}this.setStreamUrl(newStream);this.setFeatureIdField(featureIdField);this.disconnect();this.connectToEventStream()}});L.geoSSE=function(data,options){return new GeoSSE(data,options)};export default GeoSSE;